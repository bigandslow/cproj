[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "cproj"
version = "1.0.0"
description = "Multi-project CLI with git worktree + uv"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "cproj" },
]
keywords = ["git", "worktree", "development", "workflow", "cli"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Tools",
    "Topic :: System :: Systems Administration",
    "Environment :: Console",
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux",
]
requires-python = ">=3.8"
dependencies = []

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "black>=22.0",
    "flake8>=4.0",
    "mypy>=0.900",
    "coverage>=6.0",
    "pre-commit>=3.0",
    "bandit>=1.7",
    "safety>=2.0",
]

[project.scripts]
cproj = "cproj:main"

[project.urls]
Homepage = "https://github.com/user/cenv"
Repository = "https://github.com/user/cenv.git"
Issues = "https://github.com/user/cenv/issues"

[tool.hatch.build.targets.wheel]
packages = ["cproj.py"]

[tool.hatch.build.targets.sdist]
include = [
    "cproj.py",
    "README.md",
    "pyproject.toml",
    "test_cproj.py",
]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.coverage.run]
source = ["cproj"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]