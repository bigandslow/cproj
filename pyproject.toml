[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "cproj"
version = "1.0.0"
description = "Multi-project CLI with git worktree + uv"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "cproj" },
]
keywords = ["git", "worktree", "development", "workflow", "cli"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Version Control :: Git",
    "Topic :: System :: Systems Administration",
    "Environment :: Console",
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux",
]
requires-python = ">=3.8"
dependencies = []

[project.optional-dependencies]
dev = [
    # Testing framework and plugins
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-mock>=3.10",
    "pytest-xdist>=3.0",  # Parallel test execution
    "pytest-timeout>=2.1",  # Test timeout handling

    # Code quality and linting
    "ruff>=0.1.0",  # Fast Python linter and formatter
    "black>=23.0",
    "mypy>=1.0",
    "pre-commit>=3.0",

    # Security scanning
    "bandit>=1.7",  # Security vulnerability scanner
    "safety>=2.3",  # Dependency vulnerability scanner

    # Coverage and reporting
    "coverage[toml]>=7.0",

    # Documentation
    "sphinx>=5.0",
    "sphinx-rtd-theme>=1.0",
]

[project.scripts]
cproj = "cproj:main"

[project.urls]
Homepage = "https://github.com/user/cenv"
Repository = "https://github.com/user/cenv.git"
Issues = "https://github.com/user/cenv/issues"

[tool.hatch.build.targets.wheel]
# Fix: Package Python modules properly, not individual .py files
include = [
    "cproj.py",
    "claude_review_agents.py",
]

[tool.hatch.build.targets.sdist]
include = [
    "cproj.py",
    "claude_review_agents.py",
    "README.md",
    "pyproject.toml",
    "tests/",
    ".claude/commands/",
]

[tool.black]
line-length = 120
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']

# Legacy mypy config replaced with comprehensive config below

[tool.coverage.run]
source = ["cproj"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--strict-config",
    "--cov=cproj",
    "--cov=claude_review_agents",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=10",
]
testpaths = [
    "tests",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "security: marks tests as security-focused tests",
    "unit: marks tests as unit tests",
    "functional: marks tests as functional tests",
]
# timeout = 300  # Requires pytest-timeout plugin
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Ruff configuration for fast linting and formatting
[tool.ruff]
target-version = "py38"
line-length = 120

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "YTT", # flake8-2020
    "S",   # bandit (security)
    "BLE", # flake8-blind-except
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "C4",  # flake8-comprehensions
    "T10", # flake8-debugger
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "TRY", # tryceratops
    "RUF", # ruff-specific rules
]
ignore = [
    "S101",   # assert (allow assert statements in tests)
    "T201",   # print (allow print statements)
    "B008",   # function-call-in-default-argument
    "PLR0913", # too-many-arguments
    "PLR0912", # too-many-branches
    "TRY003",  # raise-vanilla-args
    "S603",    # subprocess-without-shell-equals-true
    "S607",    # start-process-with-partial-path
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101", # assert
    "PLR2004", # magic-value-comparison
    "ARG001", # unused-function-argument
]

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["typer.Option", "typer.Argument"]

# Bandit security scanner configuration
[tool.bandit]
targets = ["cproj.py", "claude_review_agents.py"]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection for specific cases

# MyPy type checking configuration
[tool.mypy]
python_version = "3.8"
strict = true
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "tests.*",
]
ignore_errors = true